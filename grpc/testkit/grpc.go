package testkit

import (
	"context"
	"net"
	"net/http/httptest"
	"strings"
	"testing"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/stretchr/testify/require"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
	"google.golang.org/grpc/test/bufconn"
)

func SetupGRPCGatewayTestEnv(
	t *testing.T,
	grpcRegister func(*grpc.Server),
	// the signature of gatewayRegister is the same as method generated by protoc-gen-grpc-gateway
	gatewayRegister func(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error,
	grpcServerOpts ...grpc.ServerOption,
) (*grpc.ClientConn, *httptest.Server) {
	// 10240 * 1024 = 10 MB
	lis := bufconn.Listen(10240 * 1024)
	grpcServer := grpc.NewServer(grpcServerOpts...)
	grpcRegister(grpcServer)
	go func() {
		err := grpcServer.Serve(lis)
		if err != nil {
			require.ErrorContainsf(t, err, "closed", "unexpected error: %v occurred", err)
		}
	}()
	t.Cleanup(func() {
		grpcServer.GracefulStop()
		require.NoError(t, lis.Close())
	})
	// the first argument passed to grpc.NewClient must be "bufnet"
	conn, err := grpc.NewClient("bufnet",
		grpc.WithContextDialer(func(ctx context.Context, s string) (net.Conn, error) {
			return lis.DialContext(ctx)
		}),
		grpc.WithTransportCredentials(insecure.NewCredentials()),
	)
	require.NoError(t, err)
	mux := runtime.NewServeMux()
	require.NoError(t, gatewayRegister(context.Background(), mux, conn))
	httpServer := httptest.NewServer(mux)
	httpServer.URL = strings.Replace(httpServer.URL, "127.0.0.1", "localhost", -1)
	t.Cleanup(httpServer.Close)
	return conn, httpServer
}
